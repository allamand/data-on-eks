apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: trainium-trn1
  namespace: karpenter # Same namespace as Karpenter add-on installed
spec:
  kubeletConfiguration:
    containerRuntime: containerd
    #    podsPerCore: 2
    #    maxPods: 20
  requirements:
    - key: "topology.kubernetes.io/zone"
      operator: In
      values: [${azs}d] # Update the correct region and zones
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: ["spot", "on-demand"]
    - key: "karpenter.k8s.aws/instance-family" #If not included, all instance types are considered
      operator: In
      values: ["trn1"] # trn1.2xlarge, trn1n.32xlarge
    - key: "node.kubernetes.io/instance-type" #If not included, all instance types are considered
      operator: In
      values: ["trn1.32xlarge"] # trn1.2xlarge, trn1n.32xlarge
  limits:
  providerRef:
    name: trainium-trn1
  labels:
    type: karpenter
    provisioner: trainium-trn1
    WorkerType: trn1-32xl
    NodeGroupType: trainium-karpenter
  taints:
    - key: trn1-karpenter
      value: 'true'
      effect: NoSchedule
  ttlSecondsAfterEmpty: 120 # optional, but never scales down if not set

#Â TODO: Network interface configuraiton for 8 network interfaces
---
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: trainium-trn1
  namespace: karpenter
spec:
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  subnetSelector:
    Name: "${eks_cluster_id}-private*"        # Name of the Subnets to spin up the nodes
  securityGroupSelector:                      # required, when not using launchTemplate
    Name: "${eks_cluster_id}-node*"           # name of the SecurityGroup to be used with Nodes
  #  instanceProfile: ""      # optional, if already set in controller args
  #RAID0 config example
  userData: |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"

    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"

    #!/bin/bash
    echo "Running a custom user data script"

    # Configure NVMe volumes in RAID0 configuration. Mount will be: /mnt/k8s-disks
    export LOCAL_DISKS='raid0'

    # Install Neuron monitoring tools
    yum install aws-neuronx-tools-2.* -y
    export PATH=/opt/aws/neuron/bin:$PATH

    # Install required packages
    yum install -y jq aws-cli

    # Get instance metadata token
    TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 3600")

    # Get instance info
    INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
    echo "INSTANCE_ID=$${INSTANCE_ID}"

    # Get instance's MAC address
    INSTANCE_MACS=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/mac)
    echo "INSTANCE_MACS=$${INSTANCE_MACS}"

    # Get SUBNET_ID using INSTANCE_MACS
    SUBNET_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/network/interfaces/macs/$${INSTANCE_MACS}/subnet-id)
    echo "SUBNET_ID=$${SUBNET_ID}"

    # Create network interfaces with device_index = 1 and network_card_index from 1 to 7
    for network_card_index in {1..7}
    do
      INTERFACE_ID=$(aws ec2 create-network-interface \
        --description "NetworkInterfaces Configuration For EFA and EKS" \
        --subnet-id $SUBNET_ID \
        --query 'NetworkInterface.NetworkInterfaceId' \
        --output text
      )
      aws ec2 attach-network-interface \
        --network-interface-id $INTERFACE_ID \
        --instance-id $INSTANCE_ID \
        --device-index 1 \
        --network-card-index $network_card_index
    done

    # EFA Setup for Trainium and Inferentia
    export FI_EFA_USE_DEVICE_RDMA=1
    export FI_PROVIDER=efa
    export FI_EFA_FORK_SAFE=1

    # Download and install EFA software
    curl -O https://efa-installer.amazonaws.com/aws-efa-installer-latest.tar.gz
    tar -xf aws-efa-installer-latest.tar.gz && cd aws-efa-installer
    ./efa_installer.sh -y -g
    /opt/amazon/efa/bin/fi_info -p efa

    --BOUNDARY--
  tags:
    InstanceType: "trainium"   # optional, add tags for your own use
